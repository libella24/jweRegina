Tabelle erstellen
=================

CREATE TABLE adressen (
    id INT unsigned, --> (unsigned = ab 0, nur positive Werte werden in der DB eingetragen)
    vorname VARCHAR (255),
    nachname VARCHAR (255),
    geburtstag DATE
);

DESCRIBE TABLE adressen;

DROP TABLE adressen;

Spalte hinzufügen (alter table - add column)
=============================================

ALTER TABLE adressen 
ADD COLUMN strasse VARCHAR(255);

Spalte entfernen (alter table - drop column)
=============================================

ALTER TABLE adressen 
DROP COLUMN strasse


Index
======

Primary - Eindeutige Datensätze
Unique - ist beim Primary automatisch 
Index - wird schneller gefunden, Suche auf die Spalte funktioniert schneller
Fulltext 

Standard NULL = nullable - es muss kein Eintrag drinnen sein

Autoincrement - nächster Eintrag bekommt die nächsthöhere ID

Daten einfügen/updaten/löschen (insert)
========================================

INSERT INTO adressen SET id = '1', vorname = 'Regina', nachname = 'Fleckl';

(id, vorname, nachname) VALUES ('1', 'Regina', 'Fleckl')

INSERT INTO `php2`.`benutzer` (`id`, `benutzername`, `email`, `passwort`) VALUES ('2', 'Regina', NULL, '12345'), ('3', 'Gerhard', NULL, '122345');

INSERT INTO `php2`.`rezepte` (
`id` ,
`titel` ,
`beschreibung` ,
`benutzer_id`
)
VALUES (
'1', 'Marillenknödel', 'Mische alle Zutaten zusammen und verarbeite sie zu einem Teig. blablabla...Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam', '2'
);

Daten ändern (update)
=====================

UPDATE adressen
SET vorname = 'Max' 
WHERE nachname LIKE 'M%';

UPDATE php2.benutzer SET email = 'Pamela@vla.com' WHERE id =5;

Daten entfernen (delete, truncate)
===================================

DELETE FROM adressen WHERE id = 1;

TRUNCATE TABLE adressen;

Daten selektieren (select)
===========================
SELECT...
standardmäßig wird nach Erstellungszeitpunkt sortiert

Ergebnis sortieren
==================
SELECT * FROM adressen LIMIT 0,3; (von 0 bis 3)

Indizes im Nachhinein hinzufügen
=================================
ALTER TABLE adressen
ADD INDEX vorname_idx

CREATE TABLE adressen (id INT AUTO_INCREMENT, vorname VARCHAR(255), ....)

Index auf Feld legen
====================
ALTER TABLE `benutzer` ADD INDEX ( `benutzername` ) ;
multi_idx (mehrere Spaltennamen können angegeben werden)


Referenzen
==========
um redundante Infos zu vermeiden
1:n Beziehungen

Tabellenverknüpfung - IDs 
on Delete

ALTER TABLE `rezepte` DROP FOREIGN KEY `rezepte_ibfk_1` ,
ADD FOREIGN KEY ( `benutzer_id` ) REFERENCES `php2`.`benutzer` (
`id`
) ON DELETE NO ACTION --> wird das Rezept gelöscht, dann bleibt der Autor noch bestehen
ON UPDATE CASCADE ;

Zuordnungstabelle
=================
bei n:m Beziehnungen

INSERT INTO `php2`.`zutaten_zu_rezepte` (`id`, `rezepte_id`, `zutaten_id`) VALUES ('1','2')


index 
= Spalte hat dann Inhaltsverzeichnis und muss nicht immer alle Werte durchschauen, wenn eine Anfrage gemacht wird.

zutaten zu rezepte = Mappingtabelle, um eine m:n Beziehung herzustellen
